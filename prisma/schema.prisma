generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CREATOR
  VIEWER
}

enum FileType {
  PDF
  TEXT
  VIDEO
}

enum NotificationType {
  PURCHASE
  NEW_CONTENT
}

model User {
  id           String   @id @default(cuid())
  whopUserId   String   @unique
  email        String?  @unique
  name         String?
  avatarUrl    String?
  role         UserRole @default(VIEWER)
  earnings     Decimal  @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  projects     Project[]
  files        File[]   @relation("FileOwner")
  purchases    Transaction[] @relation("PurchaserTransactions")
  sales        Transaction[] @relation("CreatorTransactions")
  notifications Notification[]
  fileViews    FileView[]
}

model Project {
  id          String   @id @default(cuid())
  ownerId     String
  name        String
  description String?
  summary     String?
  category    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  files       File[]

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model File {
  id             String    @id @default(cuid())
  ownerId        String
  projectId      String?
  title          String
  description    String
  category       String
  type           FileType
  storageKey     String
  storageUrl     String
  summary        String?
  transcript     String?
  isPremium      Boolean   @default(false)
  price          Decimal   @default(0)
  currency       String    @default("USD")
  totalViews     Int       @default(0)
  totalPurchases Int       @default(0)
  checksum       String?   @unique
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  project        Project?  @relation(fields: [projectId], references: [id], onDelete: SetNull)
  owner          User      @relation("FileOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  transactions   Transaction[]
  views          FileView[]
}

model Transaction {
  id                 String   @id @default(cuid())
  fileId             String
  creatorId          String
  purchaserId        String
  amount             Decimal
  currency           String   @default("USD")
  creatorShare       Decimal  @default(0)
  communityShare     Decimal  @default(0)
  platformShare      Decimal  @default(0)
  externalReference  String?  @unique
  createdAt          DateTime @default(now())

  file      File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  creator   User @relation("CreatorTransactions", fields: [creatorId], references: [id], onDelete: Cascade)
  purchaser User @relation("PurchaserTransactions", fields: [purchaserId], references: [id], onDelete: Cascade)
}

model FileView {
  id        String   @id @default(cuid())
  fileId    String
  viewerId  String?
  createdAt DateTime @default(now())
  file      File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  viewer    User?    @relation(fields: [viewerId], references: [id], onDelete: SetNull)
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  payload   Json
  createdAt DateTime         @default(now())
  readAt    DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
